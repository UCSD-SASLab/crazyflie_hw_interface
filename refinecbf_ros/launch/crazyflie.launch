<?xml version="1.0"?>

<launch>
  <!-- Topics -->
  <arg name="safety_filter_active" default="true" />
  <arg name="robot_state_topic" default="/state" />
  <arg name="cbf_state_topic" default="/safety_filter/state" />

  <arg name="disturbance_update_topic" default="/env/disturbance_update" />
  <arg name="actuation_update_topic" default="/env/actuation_update" />
  <arg name="obstacle_update_topic" default="/env/obstacle_update" />
  <arg name="vf_update_topic" default="/safety_filter/vf_update" />

  <arg name="robot_safe_control_topic" default="/robot/final_control" />
  <arg name="cbf_safe_control_topic" default="/safety_filter/safe_control" />
  <arg name="cbf_nominal_control_topic" default="/safety_filter/nominal_control" />

  <arg name="obstacle_marker_topic" default="/visualization/obstacle_marker" />
  <arg name="sdf_marker_topic" default="/visualization/sdf_marker" />
  <arg name="vf_marker_topic" default="/visualization/vf_marker" />

  <!-- Services -->
  <arg name="activate_obstacle_service" default="/env/activate_obstacle" />
  
  <!-- Can be changed to accept commands from somewhere in cf stack -->
  <arg name="robot_external_control_topic" default="/robot/external_control" />
  <arg name="cbf_external_control_topic" default="/safety_filter/external_control" />
  <arg name="publish_external_control_flag" default="/safety_filter/externally_controlled" />

  <!-- Figure out what to do with all of these -->
  <arg name="control_mode" default="MERGE" />

  <!-- Global parameters arguments -->
  <arg name="dynamics_type" default="quad_near_hover" />
  <arg name="grid_type" default="fine" />
  <!-- Parameters -->
  <param name="init_vf_file" value="$(find refinecbf_ros)/data/init_vf.npy" />
  <param name="obstacle_file" value="$(find refinecbf_ros)/data/obstacle.npy" />
  <param name="dynamics_type" value="$(arg dynamics_type)" />
  <param name="grid_type" value="$(arg grid_type)" />
  
  <arg name="config_file" default="crazyflie_env.yaml" />
  <arg name="control_config_file" default="crazyflie_control.yaml" />

  <arg name="config_file_loc" value="$(find refinecbf_ros)/config/$(arg config_file)" />
  <arg name="control_config_file_loc"
    value="$(find refinecbf_ros)/config/$(arg control_config_file)" />

  <rosparam ns="env" file="$(arg config_file_loc)" command="load" />
  <rosparam ns="ctr" file="$(arg control_config_file_loc)" />
  
  <node name="cf_nominal_control"
        pkg="refinecbf_ros"
        type="cf_nominal_controller.py"
        output="screen"
        ns="safety_filter">
    <param name="topics/state" value="$(arg cbf_state_topic)" />
    <param name="topics/nominal_control" value="$(arg cbf_nominal_control_topic)" />
    <param name="topics/external_control" value="$(arg cbf_external_control_topic)" />
    <param name="topics/publish_external_control_flag" value="$(arg publish_external_control_flag)" />
  </node> 

  <node name="cf_hw_interface"
        pkg="refinecbf_ros"
        type="cf_hw_interface.py"
        output="screen"
        ns="hw_interface">
    <param name="topics/robot_state" value="$(arg robot_state_topic)" />
    <param name="topics/cbf_state" value="$(arg cbf_state_topic)" />
    <param name="topics/robot_safe_control" value="$(arg robot_safe_control_topic)" />
    <param name="topics/cbf_safe_control" value="$(arg cbf_safe_control_topic)" />
    <param name="topics/robot_external_control" value="$(arg robot_external_control_topic)" />
    <param name="topics/cbf_external_control" value="$(arg cbf_external_control_topic)" />
  </node>

  <node name="obstacle_node"
    pkg="refinecbf_ros"
    type="obstacle_node.py"
    output="screen">
    <param name="topics/obstacle_update" value="$(arg obstacle_update_topic)" />
    <param name="topics/cbf_state" value="$(arg cbf_state_topic)" />
    <param name="services/activate_obstacle" value="$(arg activate_obstacle_service)" />
  </node>

  <node name="crazyflie_visualization"
    pkg="refinecbf_ros"
    type="cf_visualization.py"
    output="screen">
    <param name="topics/obstacle_update" value="$(arg obstacle_update_topic)" />
    <param name="topics/cbf_state" value="$(arg cbf_state_topic)" />
    <param name="topics/vf_update" value="$(arg vf_update_topic)" />
    <param name="topics/obstacle_marker" value="$(arg obstacle_marker_topic)" />
    <param name="topics/sdf_marker" value="$(arg sdf_marker_topic)" />
    <param name="topics/vf_marker" value="$(arg vf_marker_topic)" />
  </node>

  <include file="$(find refinecbf_ros)/launch/refine_cbf.launch">
    <arg name="safety_filter_active" value="$(arg safety_filter_active)" />
    <arg name="cbf_state_topic" value="$(arg cbf_state_topic)" />
    <arg name="cbf_nominal_control_topic" value="$(arg cbf_nominal_control_topic)" />
    <arg name="cbf_safe_control_topic" value="$(arg cbf_safe_control_topic)" />
    <arg name="vf_update_topic" value="$(arg vf_update_topic)" />
    <arg name="actuation_update_topic" value="$(arg actuation_update_topic)" />
    <arg name="obstacle_update_topic" value="$(arg obstacle_update_topic)" />
    <arg name="disturbance_update_topic" value="$(arg disturbance_update_topic)" />
  </include>

  <!-- Arguments for child launch files -->
  <!-- Topics. -->
  <arg name="hardware" default="false" />
  <arg name="control_reference_topic" default="/control/ref" />
  <arg name="takeoff_control_topic" default="/control/takeoff" />
  <arg name="lqr_control_topic" default="/control/lqr" />
  <arg name="in_flight_topic" default="/control/in_flight" />

  <!-- Frames of reference. -->
  <!-- Fixed frame gets written based on hardware on not hardware -->
  <arg name="robot_frame" value="crazyflie" unless="$(arg hardware)"/>
  <arg name="robot_frame" value="robot_1" if="$(arg hardware)"/>

  <!-- Takeoff hover point. -->
  <arg name="takeoff_hover_x" default="0.0" />
  <arg name="takeoff_hover_y" default="0.0" />
  <arg name="takeoff_hover_z" default="1.0" />

  <!-- Start point for the simulator. NOT SURE IF WE NEED THIS FOR HW EXPERIMENTS, DOESNT HURT TO HAVE THOUGH -->
  <arg name="sim_init_x" default="0.0" />
  <arg name="sim_init_y" default="0.0" />
  <arg name="sim_init_z" default="0.0" />

  <!-- Control parameters. -->
  <arg name="K_file" default="$(find crazyflie_lqr)/references/K_sander.txt"/>
  <arg name="u_ref_file" default="$(find crazyflie_lqr)/references/u_ref_hover.txt"/>

  <!-- Time steps. -->
  <arg name="simulator_dt" default="0.001" />
  <arg name="estimator_dt" default="0.01" />

  <!-- Dimensions. -->
  <arg name="x_dim" default="7" />
  <arg name="u_dim" default="4" />

  <!-- Frames of reference. -->
  <!-- Fixed frame gets overridden if hardware = True -->
  <arg name="fixed_frame" value="world" unless="$(arg hardware)"/>
  <arg name="fixed_frame" value="odom" if="$(arg hardware)"/>

  <!-- TF static publisher to create a base_link frame for the crazyflie. -->
  <node pkg="tf"
        type="static_transform_publisher"
        name="robot_base_link_publisher"
        args="0 0 0 0 0 0 1 $(arg robot_frame) $(arg robot_frame)/base_link 100">
  </node>

  <!-- LQR controller. -->
  <node name="lqr_controller"
        ns="/control"
        pkg="crazyflie_lqr"
        type="position_velocity_yaw_state_lift_lqr_node"
        output="screen">

    <param name="x_dim" value="$(arg x_dim)" />
    <param name="u_dim" value="$(arg u_dim)" />

    <param name="K_file" value="$(arg K_file)" />
    <param name="u_ref_file" value="$(arg u_ref_file)" />

    <param name="topics/reference" value="$(arg control_reference_topic)" />
    <param name="topics/state" value="$(arg robot_state_topic)" />
    <param name="topics/control" value="$(arg lqr_control_topic)" />
    <param name="topics/in_flight" value="$(arg in_flight_topic)" />
  </node>

  <!-- Takeoff server node. -->
  <node name="takeoff_server"
        ns="/control"
        pkg="crazyflie_takeoff"
        type="takeoff_server_node"
        output="screen">

    <param name="topics/reference" value="$(arg control_reference_topic)" />
    <param name="topics/control" value="$(arg takeoff_control_topic)" />
    <param name="topics/in_flight" value="$(arg in_flight_topic)" />

    <param name="hover/x" value="$(arg takeoff_hover_x)" />
    <param name="hover/y" value="$(arg takeoff_hover_y)" />
    <param name="hover/z" value="$(arg takeoff_hover_z)" />
  </node>

  <!-- Takeoff control filter node. -->
  <node name="takeoff_control_filter"
        ns="/control"
        pkg="crazyflie_takeoff"
        type="takeoff_control_filter_node"
        output="screen">

    <param name="topics/takeoff_control" value="$(arg takeoff_control_topic)" />
    <param name="topics/commanded_control" value="$(arg lqr_control_topic)" />
    <param name="topics/final_control" value="$(arg robot_external_control_topic)" />
    <param name="topics/in_flight" value="$(arg in_flight_topic)" />
  </node>

  <!-- Launch RViz with the proper config file robot descriptor. -->
  <node name="rviz"
        pkg="rviz"
        type="rviz"
        args="-d $(find crazyflie_simulator)/rviz/crazyflie_simulator.rviz"
        required="true">

    <param name="robot_description"
           command="$(find xacro)/xacro
                    $(find crazyflie_description)/urdf/crazyflie.urdf.xacro" />
  </node>

  <!-- If doing hardware experiments, we need to set addresses etc. -->
  <group if="$(eval arg('hardware') == 1)">
    <!-- Crayzflie addressses -->
    <arg name="robot_number" default="1" />
    <arg name="uri" default="radio://0/80/2M/E7E7E7E70$(arg robot_number)" />

    <arg name="mocap_frame" default="/natnet_ros/robot_1/pose" />

    <!-- Joystick address -->
    <arg name="joy_dev" default="/dev/input/js0" />

      <!-- TF static publisher to tie the mocap output to the robot frame. -->
    <node pkg="tf"
        type="static_transform_publisher"
        name="mocap_frame_publisher"
        args="0 0 0 0 0 0 1 $(arg mocap_frame) $(arg robot_frame) 100">
    </node>

    <!-- Crazyflie interface. -->
    <include file="$(find crazyflie_driver)/launch/crazyflie_server.launch" />

    <group ns="crazyflie">
      <include file="$(find crazyflie_driver)/launch/crazyflie_add.launch">
        <arg name="uri" value="$(arg uri)" />
        <arg name="tf_prefix" value="$(arg robot_frame)" />
        <arg name="enable_logging" value="True" />
      </include>

      <!--
      <node name="joy" pkg="joy" type="joy_node" output="screen">
        <param name="dev" value="$(arg joy_dev)" />
      </node>

      <node name="joystick_controller" pkg="crazyflie_demo" type="controller.py" output="screen">
        <param name="use_crazyflie_controller" value="True" />
      </node>
      -->
    </group>
  </group>
 
  <group if="$(eval arg('hardware') == 0)">

      <!-- Crazyflie dynamics simulator. -->
    <node name="simulator"
        pkg="crazyflie_simulator"
        type="near_hover_simulator_node"
        output="screen">

      <param name="time_step" value="$(arg simulator_dt)" />
      <param name="init/x" value="$(arg sim_init_x)" />
      <param name="init/y" value="$(arg sim_init_y)" />
      <param name="init/z" value="$(arg sim_init_z)" />

      <param name="frames/fixed" value="$(arg fixed_frame)" />
      <param name="frames/robot" value="$(arg robot_frame)" />

      <param name="topics/control" value="$(arg robot_safe_control_topic)" />
    </node>

  </group>

  <!-- State estimator. -->
  <!-- State estimator needs to be instantiated after choosing the fixed frame (sim or real) -->
  <node name="state_estimator"
        pkg="crazyflie_state_estimator"
        type="position_velocity_yaw_state_estimator_node"
        output="screen">

    <param name="x_dim" value="$(arg x_dim)" />
    <param name="time_step" value="$(arg estimator_dt)" />

    <param name="frames/fixed" value="$(arg fixed_frame)" />
    <param name="frames/robot" value="$(arg robot_frame)" />

    <param name="topics/state" value="$(arg robot_state_topic)" />
  </node>

</launch>
